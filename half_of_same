from functools import lru_cache
def solve():
	n=int(input());nums=list(map(int,input().split()));nums.sort()
	@lru_cache(None)
	def ops(x):
		dp=[1 for _ in range(n)]
		for i in range(n):
			for j in range(i):
				if((nums[i]-nums[j])%x==0):
					dp[i]=max(dp[i],dp[j]+1)
		return max(dp)
	if ops(1e9)>=n//2:return -1
	to_ret=0
	for i in range(n):
		for j in range(i):
			if nums[i]!=nums[j]:
				cur=nums[i]-nums[j]
				for k in range(1,int(cur**.5)+1):
					if cur%k==0:
						if ops(k)>=n//2:to_ret=max(to_ret,k)
						if ops(cur//k)>=n//2:to_ret=max(to_ret,cur//k)
	return to_ret
for _ in range(int(input())):
	print(solve()) 
